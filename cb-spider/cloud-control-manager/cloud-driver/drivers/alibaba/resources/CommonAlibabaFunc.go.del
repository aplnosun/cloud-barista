// Cloud Driver of CB-Spider.
// The CB-Spider is a sub-Framework of the Cloud-Barista Multi-Cloud Project.
// The CB-Spider Mission is to connect all the clouds with a single interface.
//
//      * Cloud-Barista: https://github.com/cloud-barista
//
// This is Resouces interfaces of Cloud Driver.
//
// by zephy@mz.co.kr, 2019.09.

package resources

import (
	"encoding/json"
	"errors"
	"fmt"
	"reflect"
	"strconv"
	"strings"

	"github.com/aliyun/alibaba-cloud-sdk-go/services/ecs"
	irs "github.com/cloud-barista/cb-spider/cloud-control-manager/cloud-driver/interfaces/resources"
	"github.com/davecgh/go-spew/spew"
)

const (
	// default Resource GROUP Name
	CBResourceGroupName = "CB-GROUP"
	// default VPC Name
	CBVirutalNetworkName = "CB-VNet"
	// default CIDR Block
	CBVnetDefaultCidr = "130.0.0.0/16"

	// default Subnet Name
	CBSubnetName = "CB-VNet-Sub"

	// default Bandwidth is 5 Mbit/s
	CBBandwidth = "5"
	// default InstanceChargeType
	CBInstanceChargeType = "PostPaid"
	// default InternetChargeType
	CBInternetChargeType = "PayByTraffic"

	// default Tag Name
	CBMetaDefaultTagName = "cbCate"
	// default Tag Value
	CBMetaDefaultTagValue = "cbAlibaba"

	CBPageOn = true
	// page number for control pages
	CBPageNumber = 1
	// page size for control pages
	CBPageSize = 100
)

type AlibabaCBNetworkInfo struct {
	VpcName   string
	VpcId     string
	CidrBlock string
	IsDefault bool
	State     string

	SubnetName string
	SubnetId   string
}

func GetCBResourceGroupName() string {
	return CBResourceGroupName
}

//VPC
func GetCBVirutalNetworkName() string {
	return CBVirutalNetworkName
}

//Subnet
func GetCBSubnetName() string {
	return CBSubnetName
}

func GetCBVnetDefaultCidr() string {
	return CBVnetDefaultCidr
}

// func GetCBDefaultVNetName() string {
// 	return CBVirutalNetworkName
// }

// func GetCBDefaultSubnetName() string {
// 	return CBSubnetName
// }

// func GetCBDefaultCidrBlock() string {
// 	return CBVnetDefaultCidr
// }

//이 함수는 VPC & Subnet이 존재하는 곳에서만 사용됨.
//VPC & Subnet이 존재하는 경우 정보를 리턴하고 없는 경우 Default VPC & Subnet을 생성 후 정보를 리턴 함.
func (vNetworkHandler *AlibabaVPCHandler) GetAutoCBNetworkInfo() (AlibabaCBNetworkInfo, error) {
	var alibabaCBNetworkInfo AlibabaCBNetworkInfo

	subNetId := vNetworkHandler.GetMcloudBaristaDefaultSubnetId()
	if subNetId == "" {
		//내부에서 VPC를 자동으로 생성후 Subnet을 생성함.
		_, err := vNetworkHandler.CreateVPC(irs.VPCReqInfo{})
		if err != nil {
			cblogger.Error("Default VPC(VPC & Subnet) 자동 생성 실패")
			cblogger.Error(err)
			return AlibabaCBNetworkInfo{}, err
		}
	}

	//VPC & Subnet을 생성했으므로 예외처리 없이 조회만 처리함.
	alibabaVpcInfo, _ := vNetworkHandler.GetVpc(GetCBVirutalNetworkName())
	spew.Dump(alibabaVpcInfo)
	alibabaCBNetworkInfo.VpcId = alibabaVpcInfo.Id
	alibabaCBNetworkInfo.VpcName = alibabaVpcInfo.Name

	alibabaSubnetInfo, _ := vNetworkHandler.GetVPC("")
	spew.Dump(alibabaSubnetInfo)
	alibabaCBNetworkInfo.SubnetId = alibabaSubnetInfo.Id
	alibabaCBNetworkInfo.SubnetName = alibabaSubnetInfo.Name

	spew.Dump(alibabaCBNetworkInfo)

	return alibabaCBNetworkInfo, nil
}

func (vNetworkHandler *AlibabaVPCHandler) GetMcloudBaristaDefaultVpcId() string {
	alibabaVpcInfo, err := vNetworkHandler.GetVpc(GetCBVirutalNetworkName())
	if err != nil {
		// if aerr, ok := err.(errors.Error); ok {
		// 	switch aerr.Code() {
		// 	default:
		// 		cblogger.Error(aerr.Error())
		// 	}
		// } else {
		// 	cblogger.Error(err.Error())
		// }
		cblogger.Error(err.Error())
		return ""
	}

	//기존 정보가 존재하면...
	if alibabaVpcInfo.Id != "" {
		return alibabaVpcInfo.Id
	} else {
		return ""
	}
}

func (vNetworkHandler *AlibabaVPCHandler) GetMcloudBaristaDefaultSubnetId() string {
	alibabaSubnetInfo, err := vNetworkHandler.GetVPC("")
	if err != nil {
		// if aerr, ok := err.(errors.Error); ok {
		// 	switch aerr.Code() {
		// 	default:
		// 		cblogger.Error(aerr.Error())
		// 	}
		// } else {
		// 	cblogger.Error(err.Error())
		// }
		cblogger.Error(err.Error())
		return ""
	}

	//기존 정보가 존재하면...
	if alibabaSubnetInfo.Id != "" {
		return alibabaSubnetInfo.Id
	} else {
		return ""
	}
}

func SetNameTag(Client *ecs.Client, resourceId string, resourceType string, value string) bool {
	// Tag에 Name 설정
	cblogger.Infof("Name Tage 설정 - ResourceId : [%s]  Value : [%s] ", resourceId, value)

	request := ecs.CreateAddTagsRequest()
	request.Scheme = "https"

	request.ResourceType = resourceType // "disk", "instance", "image", "securitygroup", "snapshot"
	request.ResourceId = resourceId     // "i-t4n4qtfwa4w5aavx588v"
	request.Tag = &[]ecs.AddTagsTag{
		{
			Key:   "Name",
			Value: value, // "cbVal",
		},
		{
			Key:   "cbCate",
			Value: "cbAlibaba",
		},
		{
			Key:   "cbName",
			Value: value, // "cbVal",
		},
		// Resources: []*string{&Id},
	}
	_, errtag := Client.AddTags(request)
	if errtag != nil {
		cblogger.Error("Name Tag 설정 실패 : ")
		cblogger.Error(errtag)
		return false
	}

	return true
}

// 서브넷 CIDR 생성 (CIDR C class 기준 생성)
func CreateSubnetCIDR(subnetList []*irs.VPCInfo) (*string, error) {

	// CIDR C class 최대값 찾기
	maxClassNum := 0
	for _, subnet := range subnetList.SubnetInfoList {
		irs.SubnetInfo
		addressArr := strings.Split(subnet.IPv4_CIDR, ".")
		if curClassNum, err := strconv.Atoi(addressArr[2]); err != nil {
			return nil, err
		} else {
			if curClassNum > maxClassNum {
				maxClassNum = curClassNum
			}
		}
	}

	if len(subnetList) == 0 {
		maxClassNum = 0
	} else {
		maxClassNum = maxClassNum + 1
	}

	// 서브넷 CIDR 할당
	vNetIP := strings.Split(CBVnetDefaultCidr, "/")
	vNetIPClass := strings.Split(vNetIP[0], ".")
	subnetCIDR := fmt.Sprintf("%s.%s.%d.0/24", vNetIPClass[0], vNetIPClass[1], maxClassNum)
	return &subnetCIDR, nil
}

// AssociationId 대신 PublicIP로도 가능 함.
func AssociatePublicIP(client *ecs.Client, allocationId string, instanceId string) (bool, error) {
	cblogger.Infof("ECS에 퍼블릭 IP할당 - AllocationId : [%s], InstanceId : [%s]", allocationId, instanceId)

	// ECS에 할당.
	// Associate the new Elastic IP address with an existing ECS instance.
	request := ecs.CreateAssociateEipAddressRequest()
	request.Scheme = "https"

	request.InstanceId = instanceId
	request.AllocationId = allocationId

	assocRes, err := client.AssociateEipAddress(request)
	spew.Dump(assocRes)
	cblogger.Infof("[%s] ECS에 EIP(AllocationId : [%s]) 할당 완료", instanceId, allocationId)
	// cblogger.Infof("[%s] ECS에 EIP(AllocationId : [%s]) 할당 완료 - AssociationId Id : [%s]", instanceId, allocationId, *assocRes.AssociationId)

	if err != nil {
		cblogger.Errorf("Unable to associate IP address with %s, %v", instanceId, err)
		return false, err
	}

	cblogger.Info(assocRes)
	return true, nil
}

//Cloud Object를 JSON String 타입으로 변환
func ConvertJsonString(v interface{}) (string, error) {
	jsonBytes, errJson := json.Marshal(v)
	if errJson != nil {
		cblogger.Error("JSON 변환 실패")
		cblogger.Error(errJson)
		return "", errJson
	}

	jsonString := string(jsonBytes)

	return jsonString, nil
}

//CB-KeyValue 등을 위해 String 타입으로 변환
func ConvertToString(value interface{}) (string, error) {
	if value == nil {
		cblogger.Error("Nil Value")
		return "", errors.New("NIL Value")
	}

	var result string
	t := reflect.ValueOf(value)
	cblogger.Debug("==>ValueOf : ", t)

	switch value.(type) {
	case float32:
		result = strconv.FormatFloat(t.Float(), 'f', -1, 32) // f, fmt, prec, bitSize
	case float64:
		result = strconv.FormatFloat(t.Float(), 'f', -1, 64) // f, fmt, prec, bitSize
		//strconv.FormatFloat(instanceTypeInfo.MemorySize, 'f', 0, 64)

	default:
		cblogger.Debug("--> default type:", reflect.ValueOf(value).Type())
		result = fmt.Sprint(value)
	}

	return result, nil
}

//Cloud Object를 CB-KeyValue 형식으로 변환이 필요할 경우 이용
func ConvertKeyValueList(v interface{}) ([]irs.KeyValue, error) {
	spew.Dump(v)

	var keyValueList []irs.KeyValue
	var i map[string]interface{}

	jsonBytes, errJson := json.Marshal(v)
	if errJson != nil {
		cblogger.Error("KeyValue 변환 실패")
		cblogger.Error(errJson)
		return nil, errJson
	}

	json.Unmarshal(jsonBytes, &i)

	for k, v := range i {
		cblogger.Debugf("K:[%s]====>", k)
		/*
			cblogger.Infof("v:[%s]====>", reflect.ValueOf(v))

			vv := reflect.ValueOf(v)
			cblogger.Infof("value ====>[%s]", vv.String())
			s := fmt.Sprint(v)
			cblogger.Infof("value2 ====>[%s]", s)
		*/
		//value := fmt.Sprint(v)
		value, errString := ConvertToString(v)
		if errString != nil {
			cblogger.Errorf("Key[%s]의 값은 변환 불가 - [%s]", k, errString)
			continue
		}
		keyValueList = append(keyValueList, irs.KeyValue{k, value})
	}
	cblogger.Debug("getKeyValueList : ", keyValueList)
	//keyValueList = append(keyValueList, irs.KeyValue{"test", typeToString([]float32{3.14, 1.53, 2.0000000000000})})

	return keyValueList, nil
}
